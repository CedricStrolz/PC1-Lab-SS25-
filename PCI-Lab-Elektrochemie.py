import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

U_anod = np.array([
    1.889, 1.869, 1.849, 1.818, 1.794, 1.778, 1.756, 1.737, 1.720,
    1.693, 1.672, 1.657, 1.635, 1.616, 1.598, 1.570, 1.548, 1.531,
    1.507, 1.485, 1.461, 1.401, 1.269, 1.246, 1.229, 1.215, 1.202,
    1.180, 1.160
])
i_anod = np.array([
    118.767, 83.137, 59.383, 35.630, 23.753, 17.815, 11.877, 8.314,
    5.939, 3.563, 2.375, 1.781, 1.188, 0.832, 0.594, 0.356, 0.238,
    0.178, 0.119, 0.083, 0.059, 0.036, 0.024, 0.018, 0.012, 0.008,
    0.006, 0.004, 0.002
])

U_kat = np.array([
    -0.286, -0.276, -0.267, -0.258, -0.252, -0.246, -0.240, -0.234,
    -0.230, -0.222, -0.216, -0.213, -0.207, -0.202, -0.199, -0.191,
    -0.185, -0.181, -0.175, -0.170, -0.164, -0.154, -0.144, -0.135,
    -0.120, -0.101, -0.080, -0.052, -0.018
])
i_kat = np.array([
    118.767, 83.137, 59.383, 35.630, 23.753, 17.815, 11.877, 8.314,
    5.939, 3.563, 2.375, 1.781, 1.188, 0.832, 0.594, 0.356, 0.238,
    0.178, 0.119, 0.083, 0.059, 0.036, 0.024, 0.018, 0.012, 0.008,
    0.006, 0.004, 0.002
])*-1

log_i_anod = np.log10(i_anod)
log_i_kat = np.log10(i_kat*-1)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12), sharex=True)

ax1.scatter(U_anod, i_anod, marker='x', s=20, color='#d62728', label='Anodisch')  # rot (#d62728)
ax1.scatter(U_kat, i_kat, marker='x', s=20, color='#1f77b4', label='Kathodisch')  # blau (#1f77b4)
ax1.set_ylabel(r'$i$ [mA$\cdot$cm$^{-2}]$', fontsize=12)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)

ax2.scatter(U_anod, log_i_anod, marker='x', s=20, color='#d62728', label='Anodisch')
ax2.scatter(U_kat, log_i_kat, marker='x', s=20, color='#1f77b4', label='Kathodisch')
ax2.set_xlabel(r'$U$ [V]', fontsize=12)
ax2.set_ylabel(r'$\log(i)$ [mA$\cdot$cm$^{-2}$]', fontsize=12)
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)
cut_anod = -8
p_anod = np.polyfit(U_anod[:cut_anod], log_i_anod[:cut_anod], deg=1)
x_fit_anod = np.linspace(U_anod.min(), U_anod.max(), 200)
y_fit_anod = np.polyval(p_anod, x_fit_anod)
ax2.plot(x_fit_anod, y_fit_anod, color='#d62728', linestyle='-', label='Regression Anodisch')
cut_kat = -1
p_kat = np.polyfit(U_kat[:cut_kat], log_i_kat[:cut_kat], deg=1)
x_fit_kat = np.linspace(U_kat.min(), U_kat.max(), 200)
y_fit_kat = np.polyval(p_kat, x_fit_kat)
ax2.plot(x_fit_kat, y_fit_kat, color='#1f77b4', linestyle='-', label='Regression Kathodisch')

def r_squared(y, y_pred):
    ss_res = np.sum((y - y_pred) ** 2)
    ss_tot = np.sum((y - np.mean(y)) ** 2)
    return 1 - (ss_res / ss_tot)

y_pred_anod = np.polyval(p_anod, U_anod[:cut_anod])
r2_anod = r_squared(log_i_anod[:cut_anod], y_pred_anod)
y_pred_kat = np.polyval(p_kat, U_kat[:cut_kat])
r2_kat = r_squared(log_i_kat[:cut_kat], y_pred_kat)

text_anod = f'Anodisch:\nlog(i) = {p_anod[0]:.3f}·U + {p_anod[1]:.3f}\nR² = {r2_anod:.3f}'
text_kat = f'Kathodisch:\nlog(i) = {p_kat[0]:.3f}·U + {p_kat[1]:.3f}\nR² = {r2_kat:.3f}'
ax2.text(1.1, 0.5, text_anod, color='#d62728',
         fontsize=10, bbox=dict(facecolor='white', alpha=0.7, edgecolor='none'))
ax2.text(-0.15, 0.03, text_kat, color='#1f77b4',
         fontsize=10, bbox=dict(facecolor='white', alpha=0.7, edgecolor='none'))

plt.tight_layout()
plt.show()

potential_applied1_1 = np.array([
    0.467529296875, 0.468597412109375, 0.46966552734375, 0.470733642578125, 0.4718017578125,
    0.472869873046875, 0.47393798828125, 0.475006103515625, 0.47393798828125, 0.472869873046875,
    0.4718017578125, 0.470733642578125, 0.46966552734375, 0.468597412109375, 0.467529296875,
    0.466461181640625, 0.46539306640625, 0.464324951171875, 0.4632568359375, 0.462188720703125,
    0.46112060546875, 0.460052490234375, 0.458984375, 0.457916259765625, 0.458984375,
    0.460052490234375, 0.46112060546875, 0.462188720703125, 0.4632568359375, 0.464324951171875,
    0.46539306640625, 0.466461181640625
])

current_density1_1 = np.array([
    0.00926, 0.01354, 0.01709, 0.02093, 0.02483, 0.02886, 0.03286, 0.03686, 0.02900, 0.02362,
    0.01906, 0.01486, 0.01070, 0.00648, 0.00254, -0.00099, -0.00462, -0.00841, -0.01174,
    -0.01515, -0.01852, -0.02205, -0.02508, -0.02837, -0.02104, -0.01598, -0.01183, -0.00766,
    -0.00378, 0.00002, 0.00350, 0.00706
])

potential_applied2_1 = np.array([
    0.485687255859375, 0.48675537109375, 0.487823486328125, 0.4888916015625,
    0.489959716796875, 0.49102783203125, 0.492095947265625, 0.4931640625,
    0.492095947265625, 0.49102783203125, 0.489959716796875, 0.4888916015625,
    0.487823486328125, 0.48675537109375, 0.485687255859375, 0.484619140625,
    0.483551025390625, 0.48248291015625, 0.481414794921875, 0.4803466796875,
    0.479278564453125, 0.47821044921875, 0.477142333984375, 0.47607421875,
    0.477142333984375, 0.47821044921875, 0.479278564453125, 0.4803466796875,
    0.481414794921875, 0.48248291015625, 0.483551025390625, 0.484619140625
])

current_density2_1 =np.array([
    0.01311, 0.01887, 0.02399, 0.02802, 0.03287, 0.03701, 0.04183, 0.04636,
    0.03621, 0.02962, 0.02381, 0.01807, 0.01333, 0.00838, 0.00348, -0.00191,
    -0.00656, -0.01166, -0.01661, -0.02315, -0.02752, -0.03247, -0.03711,
    -0.04143, -0.03016, -0.02219, -0.01598, -0.01032, -0.00504, -0.00026,
    0.00474, 0.00955
])

potential_applied3_1 = np.array([
    0.4962158203125, 0.497283935546875, 0.49835205078125, 0.499420166015625,
    0.50048828125, 0.501556396484375, 0.50262451171875, 0.503692626953125,
    0.50262451171875, 0.501556396484375, 0.50048828125, 0.499420166015625,
    0.49835205078125, 0.497283935546875, 0.4962158203125, 0.495147705078125,
    0.49407958984375, 0.493011474609375, 0.491943359375, 0.490875244140625,
    0.48980712890625, 0.488739013671875, 0.4876708984375, 0.486602783203125,
    0.4876708984375, 0.488739013671875, 0.48980712890625, 0.490875244140625,
    0.491943359375, 0.493011474609375, 0.49407958984375, 0.495147705078125
])

current_density3_1 = np.array([
    0.01462, 0.02067, 0.02613, 0.03157, 0.03679, 0.04193, 0.04661, 0.05219,
    0.04143, 0.03411, 0.02693, 0.02109, 0.01525, 0.00950, 0.00366, -0.00193,
    -0.00798, -0.01354, -0.01884, -0.02456, -0.03110, -0.03664, -0.04222,
    -0.04839, -0.03461, -0.02584, -0.01838, -0.01118, -0.00533, 0.00045,
    0.00608, 0.01158
])

potential_applied3_2 = np.array([
    0.478057861328125, 0.4791259765625, 0.480194091796875, 0.48126220703125,
    0.482330322265625, 0.4833984375, 0.484466552734375, 0.48553466796875,
    0.484466552734375, 0.4833984375, 0.482330322265625, 0.48126220703125,
    0.480194091796875, 0.4791259765625, 0.478057861328125, 0.47698974609375,
    0.475921630859375, 0.474853515625, 0.473785400390625, 0.47271728515625,
    0.471649169921875, 0.4705810546875, 0.469512939453125, 0.46844482421875,
    0.469512939453125, 0.4705810546875, 0.471649169921875, 0.47271728515625,
    0.473785400390625, 0.474853515625, 0.475921630859375, 0.47698974609375
])

current_density3_2 = np.array([
    0.02199, 0.03096, 0.03929, 0.04748, 0.05614, 0.06390, 0.07209, 0.08024,
    0.06176, 0.04969, 0.03925, 0.03064, 0.02150, 0.01306, 0.00419, -0.00406,
    -0.01528, -0.02170, -0.02965, -0.03733, -0.04505, -0.05187, -0.05922,
    -0.06669, -0.04806, -0.03617, -0.02545, -0.01670, -0.00763, 0.00034,
    0.00831, 0.01624
])

potential_applied3_3 = np.array([
    0.467376709, 0.468444824, 0.469512939, 0.470581055, 0.471649170, 0.472717285,
    0.473785400, 0.474853516, 0.473785400, 0.472717285, 0.471649170, 0.470581055,
    0.469512939, 0.468444824, 0.467376709, 0.466308594, 0.465240479, 0.464172363,
    0.463104248, 0.462036133, 0.460968018, 0.459899902, 0.458831787, 0.457763672,
    0.458831787, 0.459899902, 0.460968018, 0.462036133, 0.463104248, 0.464172363,
    0.465240479, 0.466308594
])

current_density3_3 = np.array([
    0.02610304, 0.03689655, 0.04744360, 0.05741074, 0.06647178, 0.07596775,
    0.08600738, 0.09524964, 0.07256080, 0.05770069, 0.04526895, 0.03425073,
    0.02392114, 0.01459190, 0.00466100, -0.00471536, -0.01340671, -0.02260185,
    -0.03196734, -0.04066594, -0.04943703, -0.05806314, -0.06589187, -0.07440925,
    -0.05400379, -0.03986857, -0.02795149, -0.01750593, -0.00704949, 0.00249360,
    0.01173223, 0.02143479
])

fig, ax = plt.subplots(figsize=(12,8))
fig, ax = plt.subplots(figsize=(12, 8))

data_sets = [
    (potential_applied1_1, current_density1_1, '#d62728', r'$1:1$'),
    (potential_applied2_1, current_density2_1, '#1f77b4', r'$2:1$'),
    (potential_applied3_1, current_density3_1, '#2ca02c', r'$3:1$'),
    (potential_applied3_2, current_density3_2, '#ff7f0e', r'$3:2$'),
    (potential_applied3_3, current_density3_3, '#9467bd', r'$3:3$'),
]

for U_values, i_values, color, label in data_sets:
    ax.scatter(U_values, i_values, marker='x', s=5, color=color, label=label)
    coeffs = np.polyfit(U_values, i_values, 1)
    x_line = np.linspace(np.min(U_values), np.max(U_values), 200)
    y_line = np.polyval(coeffs, x_line)
    ax.plot(x_line, y_line, color=color, alpha=0.7, linestyle='-')

ax.set_xlabel(r'$U$ [V]', fontsize=12)
ax.set_ylabel(r'$i$ [mA$\cdot$cm$^{-2}]$', fontsize=12)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.legend(loc='lower right', ncol=2)
plt.show()

for U_values, i_values, color, label in data_sets:
    coeffs = np.polyfit(U_values, i_values, 1)
    m, b = coeffs
    print(f"{label}: Steigung = {m:.3f}, Ordinatenabschnitt = {b:.3f}")